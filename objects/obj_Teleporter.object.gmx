<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>img_Teleporter</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
Define warpdest[x1,x2]

X1 --- Location Number

X2 --- Position
0 = x coordinates
1 = y coordinates

warpnum = Number of teleport destinations

Define warpbeam[x1,x2]

X1 --- Point Number

X2 --- Position
0 = x coordinates
1 = y coordinates

Define warpbeamc[x1,x2]

X1 --- Point Number

X2 --- Translation of point from warpbeam
0 = x coordinates
1 = y coordinates

warpbeamn = Number of points between origin and destination.
warpbeamt = Timer when beam is shown
*/

warpdest[0,0] = 0;
warpdest[0,1] = 0;
warpnum       = 1;

warpbeam[0,0] = 0;
warpbeam[0,1] = 0;
warpbeamc[0,0] = 0;
warpbeamc[0,1] = 0;

warpbeamn     = 0;
warpbeamt     = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (warpbeamt &gt; 0) {
    warpbeamt -= 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Parent_Actor">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>script_execute(scr_Smoke);
var warpsel = floor(random(warpnum));
with other {
    x = other.warpdest[warpsel,0];
    y = other.warpdest[warpsel,1];
    other.warpbeamc[0,0] = other.warpdest[warpsel,0];
    other.warpbeamc[0,1] = other.warpdest[warpsel,1];
    script_execute(scr_Smoke);
}

warpbeamn = 5 + round(random(5));
var wdesx = warpdest[warpsel,0];
var wdesy = warpdest[warpsel,1];
for (i = 1; i &lt; warpbeamn; i++) {

    if (wdesx &gt;= x) { 
          warpbeamc[i,0] = (wdesx - x) / warpbeamn * i + x;}
    else {warpbeamc[i,0] = (x - wdesx) / warpbeamn * i + wdesx;}
    
    if (wdesy &gt;= y) { 
          warpbeamc[i,1] = (wdesy - y) / warpbeamn * i + y;}
    else {warpbeamc[i,1] = (y - wdesy) / warpbeamn * i + wdesy;}

}
warpbeamc[0,0] += 8;
warpbeamc[0,1] += 8;
warpbeamc[warpbeamn, 0] = x + 8;
warpbeamc[warpbeamn, 1] = y + 8;

warpbeamt += 15+random(10);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (warpbeamt &gt; 0) {
    for (i = 0; i &lt; warpbeamn-1; i++) {
        warpbeam[i,0] = warpbeamc[i,0];
        warpbeam[i,1] = warpbeamc[i,1];
    }
    warpbeam[warpbeamn,0] = warpbeamc[warpbeamn,0];
    warpbeam[warpbeamn,1] = warpbeamc[warpbeamn,1];
    for (i = 0; i &lt; 2+round(random(3)); i++) {
        for (i = 1; i &lt; warpbeamn-1; i++) {
            randomize();
            warpbeam[i,0] += - 8 + round(random(16));
            warpbeam[i,1] += - 8 + round(random(16));
        }
        
        for (i = 0; i &lt; warpbeamn-2; i++) {
            draw_line(warpbeam[i,0],warpbeam[i,1],warpbeam[i+1,0],warpbeam[i+1,1]);
        }
        draw_line(x+8,y+8,warpbeam[warpbeamn-2,0],warpbeam[warpbeamn-2,1]);
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
